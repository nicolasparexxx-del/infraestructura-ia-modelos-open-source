apiVersion: v1
kind: Secret
metadata:
  name: ai-models-secrets
  namespace: ai-models
  labels:
    app: ai-models
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  database-url: cG9zdGdyZXNxbDovL2FpX3VzZXI6YWlfcGFzc3dvcmRAcG9zdGdyZXMtc2VydmljZTo1NDMyL2FpX21vZGVsc19kYg==
  redis-url: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzkvMA==
  api-token: eW91ci1hcGktdG9rZW4taGVyZQ==
  postgres-user: YWlfdXNlcg==
  postgres-password: YWlfcGFzc3dvcmQ=
  grafana-admin-password: YWRtaW4xMjM=
  huggingface-token: eW91ci1oZi10b2tlbi1oZXJl
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: ai-models
  labels:
    app: ai-models
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3MiLCJhdXRoIjoiZFhObGNqcHdZWE56In19fQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: ai-models
  labels:
    app: ai-models
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-models-service-account
  namespace: ai-models
  labels:
    app: ai-models
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: ai-models
  labels:
    app: prometheus
automountServiceAccountToken: true
---
# RBAC for AI Models API
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ai-models
  name: ai-models-role
  labels:
    app: ai-models
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["extensions"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-models-rolebinding
  namespace: ai-models
  labels:
    app: ai-models
subjects:
- kind: ServiceAccount
  name: ai-models-service-account
  namespace: ai-models
roleRef:
  kind: Role
  name: ai-models-role
  apiGroup: rbac.authorization.k8s.io
---
# RBAC for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
  labels:
    app: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-rolebinding
  labels:
    app: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: ai-models
roleRef:
  kind: ClusterRole
  name: prometheus-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-models-network-policy
  namespace: ai-models
  labels:
    app: ai-models
spec:
  podSelector:
    matchLabels:
      app: ai-models-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ai-models
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-models
    - namespaceSelector:
        matchLabels:
          name: kube-system
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ai-models-psp
  namespace: ai-models
  labels:
    app: ai-models
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
